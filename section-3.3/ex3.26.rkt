#lang planet neil/sicp

(define (make-tree entry left right)
  (list entry left right))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (set-entry! tree entry)
  (set-car! tree entry))
(define (set-left-branch! tree branch)
  (set-car! (cdr tree) branch))
(define (set-right-branch! tree branch)
  (set-car! (cddr tree) branch))

(define (lookup-tree value tree key compare?)
  (if (null? tree)
      false
      (let ((compare-result (compare? value (key (entry tree)))))
        (cond ((< compare-result 0) 
               (lookup-tree value (left-branch tree) key compare?))
              ((> compare-result 0)
               (lookup-tree value (right-branch tree) key compare?))
              (else (entry tree))))))

(define (insert-tree-entry! new-entry tree key compare?)
  (if (null? tree)
      (error "Given empty tree -- INSERT-TREE-ENTRY!")
      (let ((compare-result (compare? (key new-entry) (key (entry tree)))))
        (cond ((< compare-result 0)
               (if (null? (left-branch tree))
                   (set-left-branch! tree (make-tree new-entry '() '()))
                   (insert-tree-entry! new-entry (left-branch tree) key compare?)))
              ((> compare-result 0)
               (if (null? (right-branch tree))
                   (set-right-branch! tree (make-tree new-entry '() '()))
                   (insert-tree-entry! new-entry (right-branch tree) key compare?)))
              (else
               (set-entry! tree new-entry))))))

(define (make-table compare?)
  (let ((local-table '()))
    (define (lookup-local-record key)
      (lookup-tree key local-table car compare?))
    (define (insert-local-record! record)
      (if (null? local-table)
          (set! local-table (make-tree record '() '()))
          (insert-tree-entry! record local-table car compare?)))
    (define (lookup keys)
      (if (null? keys)
          (error "Got empty keys -- TABLE"))
      (let ((record (lookup-local-record (car keys))))
        (if record
            (if (null? (cdr keys))
                (cdr record)
                (((cdr record) 'lookup) (cdr keys)))
            false)))
    (define (insert! keys value)
      (if (null? keys)
          (error "Got empty keys -- TABLE"))
      (let ((record (lookup-local-record (car keys))))
        (if record
            (if (null? (cdr keys))
                (set-cdr! record value)
                (((cdr record) 'insert!) (cdr keys) value))
            (if (null? (cdr keys))
                (insert-local-record! (cons (car keys) value))
                (let ((new-table (make-table compare?)))
                  ((new-table 'insert!) (cdr keys) value)
                  (insert-local-record! (cons (car keys) new-table))))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            ((eq? m 'local-table) local-table)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define (lookup table keys)
  ((table 'lookup) keys))

(define (insert! table keys value)
  ((table 'insert!) keys value))

(define (assertion-error)
  (error "Assertion failed"))

(define compare-symbols? 
  (lambda (x y)
    (let ((x-string (symbol->string x))
          (y-string (symbol->string y)))
      (cond ((string<? x-string y-string) -1)
            ((string>? x-string y-string) 1)
            (else 0)))))

(define (test)
  (let ((x (make-table compare-symbols?)))
    (or (not (lookup x '(foo))) (assertion-error))
    (insert! x '(foo) 'bar)
    (insert! x '(baz) 'quux)
    (or (equal? (lookup x '(foo)) 'bar) (assertion-error))
    (or (equal? (lookup x '(baz)) 'quux) (assertion-error))

    (insert! x '(math +) 1)
    (insert! x '(math -) 2)
    (or (equal? (lookup x '(math +)) 1) (assertion-error))
    (or (equal? (lookup x '(math -)) 2) (assertion-error))
    (or (not (lookup x '(math *))) (assertion-error))

    (insert! x '(language english a) 97)
    (insert! x '(language english b) 98)
    (insert! x '(language hindi k) 1)
    (or (equal? (lookup x '(language english a)) 97) (assertion-error))
    (or (equal? (lookup x '(language english b)) 98) (assertion-error))
    (or (equal? (lookup x '(language hindi k)) 1) (assertion-error))
    (or (not (lookup x '(language english c))) (assertion-error))
    (or (not (lookup x '(language hindi kh))) (assertion-error))

    x))
