#lang planet neil/sicp

(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup keys subtable)
      (if (null? keys)
          (error "Got empty keys -- TABLE"))
      (let ((record (assoc (car keys) (cdr subtable))))
        (if record
            (if (null? (cdr keys))
                (cdr record)
                (lookup (cdr keys) (cdr record)))
            false)))
    (define (insert! keys value subtable)
      (if (null? keys)
          (error "Got empty keys -- TABLE"))
      (let ((record (assoc (car keys) (cdr subtable))))
        (if record
            (if (null? (cdr keys))
                (set-cdr! record value)
                (insert! (cdr keys) value (cdr record)))
            (if (null? (cdr keys))
                (set-cdr! subtable (cons (cons (car keys) value) (cdr subtable)))
                (let ((new-table (list '*table*)))
                  (insert! (cdr keys) value new-table)
                  (set-cdr! subtable (cons (cons (car keys) new-table)
                                           (cdr subtable)))))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) (lambda (keys) (lookup keys local-table)))
            ((eq? m 'insert!) (lambda (keys value) (insert! keys value local-table)))
            ((eq? m 'local-table) local-table)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define (lookup table keys)
  ((table 'lookup) keys))

(define (insert! table keys value)
  ((table 'insert!) keys value))
