#lang sicp

(define (make-table same-key?)
  (let ((local-table '()))
    (define (assoc key records)
      (cond ((null? records) false)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup-local-record key)
      (assoc key local-table))
    (define (insert-local-record! record)
      (set! local-table (cons record local-table)))
    (define (lookup keys)
      (if (null? keys)
          (error "Got empty keys -- TABLE"))
      (let ((record (lookup-local-record (car keys))))
        (if record
            (if (null? (cdr keys))
                (cdr record)
                (((cdr record) 'lookup) (cdr keys)))
            false)))
    (define (insert! keys value)
      (if (null? keys)
          (error "Got empty keys -- TABLE"))
      (let ((record (lookup-local-record (car keys))))
        (if record
            (if (null? (cdr keys))
                (set-cdr! record value)
                (((cdr record) 'insert!) (cdr keys) value))
            (if (null? (cdr keys))
                (insert-local-record! (cons (car keys) value))
                (let ((new-table (make-table same-key?)))
                  ((new-table 'insert!) (cdr keys) value)
                  (insert-local-record! (cons (car keys) new-table))))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            ((eq? m 'local-table) local-table)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define (lookup table keys)
  ((table 'lookup) keys))

(define (insert! table keys value)
  ((table 'insert!) keys value))

(define (assertion-error)
  (error "Assertion failed"))

(define (test)
  (let ((x (make-table equal?)))
    (or (not (lookup x '(foo))) (assertion-error))
    (insert! x '(foo) 'bar)
    (insert! x '(baz) 'quux)
    (or (equal? (lookup x '(foo)) 'bar) (assertion-error))
    (or (equal? (lookup x '(baz)) 'quux) (assertion-error))

    (insert! x '(math +) 1)
    (insert! x '(math -) 2)
    (or (equal? (lookup x '(math +)) 1) (assertion-error))
    (or (equal? (lookup x '(math -)) 2) (assertion-error))
    (or (not (lookup x '(math *))) (assertion-error))

    (insert! x '(language english a) 97)
    (insert! x '(language english b) 98)
    (insert! x '(language hindi k) 1)
    (or (equal? (lookup x '(language english a)) 97) (assertion-error))
    (or (equal? (lookup x '(language english b)) 98) (assertion-error))
    (or (equal? (lookup x '(language hindi k)) 1) (assertion-error))
    (or (not (lookup x '(language english c))) (assertion-error))
    (or (not (lookup x '(language hindi kh))) (assertion-error))

    x))
