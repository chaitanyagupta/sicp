#lang planet neil/sicp
#|
(define (count-pairs x)
  (let ((encountered-pairs '()))
    (define (pair-encountered? pair encountered-pairs)
      (cond ((null? encountered-pairs) false)
            ((eq? pair (car encountered-pairs)) true)
            (else (pair-encountered? pair (cdr encountered-pairs)))))
    (define (count-pairs-aux x)
      (cond ((not (pair? x)) 0)
            ((pair-encountered? x encountered-pairs) 0)
            (else (set! encountered-pairs (cons x encountered-pairs))
                  (+ (count-pairs-aux (car x))
                     (count-pairs-aux (cdr x))
                     1))))
    (count-pairs-aux x)))
|#
(define (count-pairs x)
  (define (pair-encountered? pair encountered-pairs)
    (cond ((null? encountered-pairs) false)
          ((eq? pair (car encountered-pairs)) true)
          (else (pair-encountered? pair (cdr encountered-pairs)))))
  (define (count-pairs-aux x encountered-pairs)
    (cond ((not (pair? x)) (cons 0 encountered-pairs))
          ((pair-encountered? x encountered-pairs) (cons 0 encountered-pairs))
          (else (let* ((encountered-pairs (cons x encountered-pairs))
                       (car-result (count-pairs-aux (car x) encountered-pairs))
                       (car-result-count (car car-result))
                       (car-result-encountered-pairs (cdr car-result))
                       (cdr-result (count-pairs-aux (cdr x) car-result-encountered-pairs))
                       (cdr-result-count (car cdr-result))
                       (cdr-result-encountered-pairs (cdr cdr-result)))
                  (cons (+ car-result-count cdr-result-count 1)
                        cdr-result-encountered-pairs)))))
  (car (count-pairs-aux x '())))
